
# You can use this file to easily send requests to your API.
# Prerequisite: humao.rest-client Vscode plugin (already present on codespace)
# High-level overview of REST API concepts used here: https://www.packtpub.com/en-us/learning/how-to-tutorials/what-are-rest-verbs-and-status-codes-tutorial?srsltid=AfmBOoppDqtkhRxj5BLZONRZFzRDmh6eP-xyTo6H4OuEHYuVbrg1d4Dm


# Requests for API endpoints of the sample project:

### Hello world endpoint: get response "Hello, Stranger!"
GET http://localhost:8080/hello-world

### Hello world with a request param passed.
# When sending the request it will ask you for the name
# hitting enter will avoid passing the param, and do the default behaviour above
# @prompt name The name to display in response
GET http://localhost:8080/hello-world
    ?name={{name}}

### Save a greeting to database
@postGreetingId = 1001
@postGreetingContent = Hello!
POST http://localhost:8080/greetings
Content-Type: application/json

{
    "id": "{{postGreetingId}}",
    "content": "{{postGreetingContent}}"
}

### Get all greetings
GET http://localhost:8080/greetings

### Get info for greeting with given content
# @prompt content Greeting content to look for, defaults to "Overview"
GET http://localhost:8080/info
    ?title={{content}}

### Update an existing greeting
@putGreetingId = 1001
@putGreetingContent = Hello again!
PUT http://localhost:8080/greetings/{{putGreetingId}}
Content-Type: application/json

{
    "content": "{{putGreetingContent}}"
}

### Delete greeting
@deleteGreetingId = 1001
DELETE http://localhost:8080/greetings/{{deleteGreetingId}}


# TODO add requests for your own endpoints!

### Get all parties
GET http://localhost:8080/parties


GET http://localhost:8080/parties/{id}

### Get all locations
GET http://localhost:8080/parties/{id}/locations

### Filter locations by rating (minimum rating)
# @prompt minRating Introdu rating-ul minim
GET http://localhost:8080/parties/{id}/locations?minRating={{minRating}}

### Filter locations by price (maximum price)
# @prompt maxPrice Introdu prețul maxim
GET http://localhost:8080/parties/{id}/locations?maxPrice={{maxPrice}}

### Filter locations by discount points (maximum required points)
# @prompt maxPoints Introdu numărul maxim de puncte de discount
GET http://localhost:8080/parties/{id}/locations?maxPoints={{maxPoints}}

### Obține toate produsele alimentare
GET http://localhost:8080/parties/{id}/foods

### Obține alimentele cu rating mai mare sau egal cu o valoare dată
# @prompt minRating Introdu rating-ul minim
GET http://localhost:8080/parties/{id}/foods?minRating={{minRating}}

### Obține alimentele cu preț mai mic sau egal cu o valoare dată
# @prompt maxPrice Introdu prețul maxim
GET http://localhost:8080/parties/{id}/foods?maxPrice={{maxPrice}}

### Obține alimentele care necesită un număr de puncte de discount mai mic sau egal cu o valoare dată
# @prompt maxPoints Introdu numărul maxim de puncte de discount
GET http://localhost:8080/parties/{id}/foods?maxPoints={{maxPoints}}


### Adaugă un produs alimentar la o petrecere
# @prompt partyId Introdu ID-ul petrecerii
# @prompt foodId Introdu ID-ul produsului alimentar
POST http://localhost:8080/parties/{{partyId}}/foods/{{foodId}}
Content-Type: application/json

### Adaugă un produs alimentar la o petrecere
# @prompt partyId Introdu ID-ul petrecerii
# @prompt locationId Introdu ID-ul produsului alimentar
POST http://localhost:8080/parties/{{partyId}}/location/{{locationId}}
Content-Type: application/json

### Get all tasks for a party
# @prompt partyId Party ID to get the tasks for
GET http://localhost:8080/parties/{{partyId}}/tasks

### Get task by ID
# @prompt taskId Task ID to get details for
GET http://localhost:8080/tasks/{{taskId}}

### Get all tasks assigned to a user
# @prompt userId User ID to get the tasks for
GET http://localhost:8080/tasks/user/{{userId}}

### Create a new task
POST http://localhost:8080/tasks
Content-Type: application/json

{
  "name": "New Task",
  "description": "This is a new task",
  "points": 15,
  "partyId": [],
  "assignedUserId": [],
  "completed": false
}

### Update an existing task
# @prompt taskId Task ID to update
PUT http://localhost:8080/tasks/{{taskId}}
Content-Type: application/json

{
  "id": "{{taskId}}",
  "name": "Updated Task",
  "description": "Updated description",
  "points": 20,
  "partyId": [],
  "assignedUserId": [],
  "completed": true
}

### Delete a task
# @prompt taskId Task ID to delete
DELETE http://localhost:8080/tasks/{{taskId}}

# @prompt partyId The ID of the party to fetch
GET http://localhost:8080/parties/{{partyId}}


# @prompt partyName The name of the new party
# @prompt partyDate The date of the party
POST http://localhost:8080/parties
Content-Type: application/json

 

# @prompt partyId The ID of the party to update
# @prompt partyName The new name for the party
# @prompt partyDate The new date for the party
PUT http://localhost:8080/parties/{{partyId}}
Content-Type: application/json

{
  "name": "{{partyName}}",
  "date": "{{partyDate}}"
}

# @prompt partyId The ID of the party to delete
DELETE http://localhost:8080/parties/{{partyId}}

# @prompt partyId The ID of the party
# @prompt songTitle The title of the song to add
# @prompt songArtist The artist of the song to add
POST http://localhost:8080/parties/{{partyId}}/songs
Content-Type: application/json

{
  "title": "{{songTitle}}",
  "artist": "{{songArtist}}"
}

# delete song from party 
DELETE http://localhost:8080/parties/{partyId}/songs/{songId}

### Get all users
GET http://localhost:8080/users

### Get a user by ID with their parties
GET http://localhost:8080/users/{userId}

### Create a new user
POST http://localhost:8080/users
Content-Type: application/json

{
  "name": "Name",
  "email": "name@example.com",
  "points": 100
}

### Update a user
PUT http://localhost:8080/users/{userId}
Content-Type: application/json

{
  "name": "Updated Name",
  "email": "updatedemail@example.com",
  "points": 150
}

### Delete a user
DELETE http://localhost:8080/users/{userId}

### Add a user to a party
POST http://localhost:8080/users/{userId}/join/{partyId}

### Create a new party as a user
POST http://localhost:8080/users/{userId}/createParty
Content-Type: application/json

{
  "name": "Party name",
  "date": "Date",
  "locationId": "someLocation",
  "foodIds": ["food1", "food2"],
  "userIds": [],
  "playlistIds": [],
  "taskIds": [],
  "partyPoints": points
}

POST http://localhost:8080/parties/{partyId}/tasks
Content-Type: application/json

{
  "description": "Clean the party venue",
  "points": 10
}


DELETE http://localhost:8080/parties/{partyId}/location
Content-Type: application/json

DELETE http://localhost:8080/parties/{partyId}/foods/{foodId}
Content-Type: application/json